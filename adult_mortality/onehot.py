# -*- coding: utf-8 -*-
"""onehot

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g19aYGS-Wr1j7ftbgF9bR1VWU5H-MqOE
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive/')

cd 'drive/My Drive/Colab Notebooks'

mortality = pd.read_csv('FINAL_DATASET.csv')
mortality = mortality.sample(frac=1)
X = mortality.values
X = mortality.drop(columns = ['DateModified', 'Unnamed: 0'], axis = 1)

X.head()

#Mae
from sklearn.preprocessing import OneHotEncoder

enc = OneHotEncoder(handle_unknown='ignore', sparse = False)

zX =enc.fit_transform(X[['Location', 'Sex']])

zX = pd.DataFrame(zX, columns = enc.get_feature_names_out(['Location', 'Sex' ]))
zX.head()

enc.feature_names_in_

main = pd.concat([zX, X[['Period', 'Adult mortality rate']]], axis = 1)
main['Adult mortality rate'] = np.around(main['Adult mortality rate'].values)
main.head()

#Splits by Period 

train = main.query("Period < 2012")
test = main.query("Period >= 2012 and Period < 2014")
validation = main.query("Period >= 2014")
train['Period'].unique()
main.shape
print(train.shape)
print(test.shape)
print(validation.shape)

#Create a function with many machine learning models
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score

import math

def models(X_train, Y_train, X_test, Y_test, X_val, Y_val):
  
  from sklearn.linear_model import LinearRegression
  lr = LinearRegression()
  lr.fit(X_train, Y_train)
  #Print the training accuracy for each model

  y_test_pred = lr.predict(X_test)
  lr_rmse_test = math.sqrt(mean_squared_error(Y_test, y_test_pred))
  
  y_val_pred = lr.predict(X_val)
  lr_val_rmse_test = math.sqrt(mean_squared_error(Y_val, y_val_pred))



  from sklearn.ensemble import RandomForestRegressor
  from sklearn.datasets import make_regression
  regr = RandomForestRegressor(max_depth=6, random_state=0, min_samples_leaf = 2)
  print(X_train.shape)
  regr.fit(X_train, Y_train)

  fr_y_pred = regr.predict(X_test)
  fr_test_rmse_test = math.sqrt(mean_squared_error(Y_test, fr_y_pred))


  fr_y_val = regr.predict(X_val)
  fr_val_rmse_test = math.sqrt(mean_squared_error(Y_val, fr_y_val))
  val_score = regr.score(X_val, Y_val)

  val_score = r2_score(Y_val,fr_y_val)

  #Linear Regression
  print(lr_rmse_test)
  print(lr_val_rmse_test)

  print("Random Forest")
  print(fr_test_rmse_test, val_score)
  print(fr_val_rmse_test)

  #Generalized Linear Regression

  #return log, knn, svc_lin, svc_rbf, gauss, tree, forest
  #return lr

x_train = train.drop(columns = ['Period', 'Adult mortality rate'])
y_train = train['Adult mortality rate']

x_test = test.drop(columns = ['Period', 'Adult mortality rate'])
y_test = test['Adult mortality rate']

x_val = validation.drop(columns = ['Period', 'Adult mortality rate'])
y_val = validation['Adult mortality rate']

model = models(x_train, y_train, x_test, y_test, x_val, y_val)

